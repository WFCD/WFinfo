<Window x:Class="WFInfo.Settings"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="Settings"
        Width="334"
        BorderBrush="#FF707070"
        WindowStyle="None"
        FontSize="16"
        SizeToContent="Height"
        ResizeMode="NoResize"
    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">
    <Window.Resources>
        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>
        <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="AllowDrop" Value="true"/>
            <Setter Property="MinWidth" Value="0"/>
            <Setter Property="MinHeight" Value="0"/>
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="ComboBox.Static.Background" Color="#FF0F0F0F" />
        <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Background" Color="#FF000000"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Border" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Static.Editable.Button.Border" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Background" Color="#FF000000"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="#FF000000"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Background" Color="#FF000000"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Border" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Background" Color="#FF000000"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Editable.Button.Border" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Background" Color="#FF000000"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Background" Color="#FF000000"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Border" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Background" Color="#FF000000"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Editable.Button.Border" Color="#FFACACAC"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Background" Color="#FFF0F0F0"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Border" Color="#FFD9D9D9"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Glyph" Color="#FFBFBFBF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Border" Color="#FFBFBFBF"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Background" Color="Transparent"/>
        <SolidColorBrush x:Key="ComboBox.Disabled.Editable.Button.Border" Color="Transparent"/>
        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="templateRoot" Background="{StaticResource ComboBox.Static.Background}" BorderBrush="{StaticResource ComboBox.Static.Border}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                            <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{StaticResource ComboBox.Static.Glyph}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Static.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Static.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.MouseOver.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Pressed.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Disabled.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Disabled.Editable.Border}"/>
                                <Setter Property="Background" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Background}"/>
                                <Setter Property="BorderBrush" TargetName="splitBorder" Value="{StaticResource ComboBox.Disabled.Editable.Button.Border}"/>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </theme:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                <Border x:Name="border" Background="{StaticResource TextBox.Static.Background}" Margin="{TemplateBinding BorderThickness}">
                    <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Border>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEnabled" Value="false">
                    <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="true">
                    <Setter Property="Foreground" Value="Black"/>
                </Trigger>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                        <Border x:Name="dropDownBorder" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </theme:SystemDropShadowChrome>
                </Popup>
                <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                <ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="LocaleComboBoxStyle" TargetType="{x:Type ComboBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ComboBox.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="Padding" Value="6,3,5,3"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
            <Style.Triggers>
                <Trigger Property="IsEditable" Value="true">
                    <Setter Property="IsTabStop" Value="false"/>
                    <Setter Property="Padding" Value="2"/>
                    <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <DockPanel MouseDown="MouseDown"
               PreviewMouseDown="ActivationMouseDown"
               Background="#FF1B1B1B"
               Width="334">
        <DockPanel.Resources>

            <Style x:Key="NestedBorder"
                   TargetType="Border">
                <Setter Property="BorderBrush"
                        Value="#FF646464" />
                <Setter Property="Padding"
                        Value="5, 2" />
                <Setter Property="BorderThickness"
                        Value="1" />
            </Style>
            <Style TargetType="Border">
                <Setter Property="BorderBrush"
                        Value="#FF646464" />
                <Setter Property="Padding"
                        Value="25, 5" />
                <Setter Property="BorderThickness"
                        Value="1" />
            </Style>

            <Style BasedOn="{StaticResource baseStyle}"
                   TargetType="TextBox">
                <Setter Property="Background"
                        Value="#FF0F0F0F" />
                <Setter Property="BorderBrush"
                        Value="#FFB1D0D9" />
                <Setter Property="VerticalContentAlignment"
                        Value="Center" />
                <Setter Property="HorizontalContentAlignment"
                        Value="Center" />
                <Setter Property="Margin"
                        Value="0, 5" />
                <Setter Property="Padding"
                        Value="0,1,0,2.5" />
                <Setter Property="Cursor"
                        Value="Arrow" />
                <Setter Property="TextWrapping"
                        Value="Wrap" />
                <Setter Property="FontFamily"
                        Value="{StaticResource Roboto}"/>
            </Style>

            <Style TargetType="CheckBox"
                   BasedOn="{StaticResource baseStyle}">
                <Setter Property="Background"
                        Value="#FFB1D0D9" />
                <Setter Property="BorderBrush"
                        Value="#FF0F0F0F" />
                <Setter Property="VerticalContentAlignment"
                        Value="Center" />
            </Style>
        </DockPanel.Resources>
        <Grid HorizontalAlignment="Left"
              Height="27"
              VerticalAlignment="Top"
              Width="334"
              DockPanel.Dock="Top"
              Panel.ZIndex="500">
            <Rectangle x:Name="Main_bar"
                       Fill="#FF0F0F0F"
                       HorizontalAlignment="Left"
                       Height="27"
                       Stroke="#FF646464"
                       VerticalAlignment="Top"
                       Width="335" />
            <Image HorizontalAlignment="Left"
                   Height="26"
                   VerticalAlignment="Top"
                   Width="27"
                   RenderTransformOrigin="-1.263,-0.625"
                   Source="Resources/WFLogo.png"
                   Margin="1,0,0,0" />
            <TextBlock Text="Settings"
                       Margin="34,4,0,0"
                       Background="{x:Null}"
                       HorizontalAlignment="Left"
                       VerticalAlignment="Top"
                       FontSize="16"
                       FontFamily="{StaticResource Roboto_Black}"
                       FontWeight="Bold"
                       Grid.Column="1" />
            <Label x:Name="exit"
                   MouseLeftButtonDown="Hide"
                   Content="x"
                   Margin="304,0,0,0"
                   Style="{StaticResource Label_Button}" />
        </Grid>
        <Border DockPanel.Dock="Top">
            <DockPanel>
                <Grid DockPanel.Dock="Bottom"
                      HorizontalAlignment="Stretch">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <RadioButton x:Name="WindowRadio"
                                 Grid.Column="1"
                                 Content="Window"
                                 ToolTip="Display rewards in a separate window"
                                 VerticalContentAlignment="Center"
                                 Checked="WindowChecked"
                                 Background="#FFB1D0D9"
                                 BorderBrush="#FF0F0F0F"
                                 HorizontalAlignment="Center" />
                    <RadioButton x:Name="OverlayRadio"
                                 Grid.Column="2"
                                 Content="Overlay"
                                 ToolTip="Display rewards on top of Warframe"
                                 VerticalContentAlignment="Center"
                                 Checked="OverlayChecked"
                                 Background="#FFB1D0D9"
                                 BorderBrush="#FF0F0F0F" />
                    <RadioButton x:Name="LightRadio"
                                 Grid.Column="0"
                                 Content="Light"
                                 ToolTip="Do not display any window at all"
                                 VerticalContentAlignment="Center"
                                 Checked="LightRadioChecked"
                                 Background="#FFB1D0D9"
                                 BorderBrush="#FF0F0F0F" />
                </Grid>
                <Label Content="Rewards display"
                       DockPanel.Dock="Top"
                       HorizontalAlignment="Center"
                       FontFamily="{StaticResource Roboto}"
                       Margin="0,0,-1,0" />
            </DockPanel>
        </Border>
        <Border DockPanel.Dock="Top">
            <UniformGrid>
                <Label Content="Display time" />
                <TextBox x:Name="Displaytime_number_box"
                         ToolTip="The time in milliseconds the overlays will be displayed on screen"
                         Text="TextBox"
                         KeyDown="Displaytime_number_box_KeyDown"
                         GotFocus="Displaytime_number_box_GotFocus"
                         KeyUp="Displaytime_number_box_KeyUp" />

                <CheckBox x:Name="HighlightCheckbox"
                          Content="Highlight"
                          ToolTip="Highlight the best rewards on the overlay."
                          Click="HighlightRewardCheckbox_Click" />
                <CheckBox x:Name="HighContrastCheckbox"
                          Content="High contrast"
                          ToolTip="Enable High contrast for the overlay."
                          Click="HighContrastCheckbox_Click"/>
            </UniformGrid>
        </Border>
        <Border x:Name="Overlay_sliders"
                DockPanel.Dock="Top">
            <DockPanel LastChildFill="False">
                <Label Content="Overlay Offset"
                       DockPanel.Dock="Top"
                       HorizontalAlignment="Center"
                       FontFamily="{StaticResource Roboto}"
                       Margin="0,0,-1,0" />
                <DockPanel LastChildFill="False"
                           DockPanel.Dock="Top">
                    <Label Content="X"
                           DockPanel.Dock="Left"
                           HorizontalContentAlignment="Center"
                           Width="32"
                           ToolTip="The X Offset of the overlay. Positive values shift the overlay to the right." />
                    <TextBox x:Name="OverlayXOffset_number_box"
                             DockPanel.Dock="Left"
                             ToolTip="The X Offset of the overlay. Positive values shift the overlay to the right."
                             TextWrapping="Wrap"
                             Width="90"
                             KeyDown="OverlayXOffset_number_box_KeyDown"
                             GotFocus="OverlayXOffset_number_box_GotFocus"
                             KeyUp="OverlayXOffset_number_box_KeyUp"
                             Text="0" />

                    <TextBox x:Name="OverlayYOffset_number_box"
                             DockPanel.Dock="Right"
                             ToolTip="The Y Offset of the overlay. Positive values shift the overlay towards the top."
                             Width="90"
                             KeyDown="OverlayYOffset_number_box_KeyDown"
                             GotFocus="OverlayYOffset_number_box_GotFocus"
                             KeyUp="OverlayYOffset_number_box_KeyUp"
                             Text="0" />
                    <Label Content="Y"
                           DockPanel.Dock="Right"
                           HorizontalContentAlignment="Center"
                           Width="32"
                           ToolTip="The Y Offset of the overlay. Positive values shift the overlay towards the top." />
                </DockPanel>
            </DockPanel>
        </Border>
        <Border DockPanel.Dock="Top">
            <UniformGrid>
                <Label Content="Snap Noise"
                       ToolTip="Snap-It item count noise filtering threshhold" />
                <TextBox x:Name="SnapItCountThreshold_number_box"
                         ToolTip="Threshold for number detection noise filtering. Higher = More aggressive, 3 or 4 usually works best"
                         KeyDown="SnapItCountThreshold_number_box_KeyDown"
                         GotFocus="SnapItCountThreshold_number_box_GotFocus"
                         KeyUp="SnapItCountThreshold_number_box_KeyUp"
                         VerticalAlignment="Top"
                         Text="4" />

                <CheckBox x:Name="SnapItemCountCheckbox"
                          Content="Count Item"
                          ToolTip="Scan for item amount using Snap-It"
                          Click="SnapItemCountCheckbox_Click" />

                <CheckBox x:Name="SnapItThreadCheckbox"
                          Content="Multithread Snap"
                          ToolTip="Speed up snap-it using multithreading"
                          Click="SnapItThreadCheckbox_Click" />

            </UniformGrid>
        </Border>
        <Border DockPanel.Dock="Top">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Label Content="Activation key"
                       Grid.Row="0"
                       Grid.Column="0" />
                <TextBox x:Name="Activation_key_box"
                         Grid.Row="0"
                         Grid.Column="1"
                         ToolTip="Key to activate the processing. Use modifiers below to achieve other actions"
                         Text="TextBox"
                         KeyDown="ActivationDown"
                         GotFocus="ActivationFocus"
                         KeyUp="ActivationUp"
                         LostFocus="ActivationLost"
                         VerticalAlignment="Top" />
                <TextBlock x:Name="hidden"
                           Focusable="True"
                           Visibility="Visible"
                           IsEnabled="True"
                           HorizontalAlignment="Left"
                           TextWrapping="Wrap"
                           Text=""
                           VerticalAlignment="Top"
                           Height="1"
                           Width="1"
                           RenderTransformOrigin="0.5,0.5"
                           d:IsHidden="True" />
                <Label Content="Search it modifier"
                       Grid.Row="1"
                       Grid.Column="0" />
                <TextBox x:Name="Searchit_key_box"
                         Grid.Row="1"
                         Grid.Column="1"
                         ToolTip="Modifier to hold down to start search it"
                         Text="TextBox"
                         KeyDown="Searchit_key_box_KeyDown"
                         GotFocus="Searchit_key_box_GotFocus"
                         KeyUp="Searchit_key_box_KeyUp"
                         LostFocus="Searchit_key_box_LostFocus"
                         VerticalAlignment="Top" />
                <Label Content="Snap it modifier"
                       Grid.Row="2"
                       Grid.Column="0" />
                <TextBox x:Name="Snapit_key_box"
                         Grid.Row="2"
                         Grid.Column="1"
                         ToolTip="Modifier to hold down to start Snap it"
                         Text="TextBox"
                         KeyDown="Snapit_key_box_KeyDown"
                         GotFocus="Snapit_key_box_GotFocus"
                         KeyUp="Snapit_key_box_KeyUp"
                         LostFocus="Snapit_key_box_LostFocus"
                         VerticalAlignment="Top" />
                <Label Content="Master it modifier"
                       Grid.Row="3"
                       Grid.Column="0" />
                <TextBox x:Name="Masterit_key_box"
                         Grid.Row="3"
                         Grid.Column="1"
                         ToolTip="Modifier to hold down to start Snap it"
                         Text="TextBox"
                         KeyDown="Masterit_key_box_KeyDown"
                         GotFocus="Masterit_key_box_GotFocus"
                         KeyUp="Masterit_key_box_KeyUp"
                         LostFocus="Masterit_key_box_LostFocus"
                         VerticalAlignment="Top" />
            </Grid>
        </Border>
        <Border DockPanel.Dock="Top">
            <UniformGrid>
                <Label Content="Efficiency min" />
                <Label Content="Efficiency max" />
                <TextBox x:Name="EfficiencyMin_number_box"
                         ToolTip="Anything below this efficiency will be marked as red in snapit"
                         Text="TextBox"
                         Margin="0, 0, 20, 0"
                         KeyDown="EfficiencyMin_number_box_KeyDown"
                         GotFocus="EfficiencyMin_number_box_GotFocus"
                         LostFocus="EfficiencyMin_number_box_LostFocus"
                         VerticalAlignment="Top" />
                <TextBox x:Name="EfficiencyMax_number_box"
                         ToolTip="Anything above this efficiency will be marked as green in snapit"
                         Text="TextBox"
                         Margin="0, 0, 20, 0"
                         KeyDown="EfficiencyMax_number_box_KeyDown"
                         GotFocus="EfficiencyMax_number_box_GotFocus"
                         LostFocus="EfficiencyMax_number_box_LostFocus"
                         VerticalAlignment="Top" />
            </UniformGrid>
        </Border>

        <Border Padding="0"
                DockPanel.Dock="Top">
            <DockPanel>
                <Label MouseLeftButtonDown="ClickCreateDebug"
                       Padding="5"
                       DockPanel.Dock="Right"
                       Content="Create debug zip"
                       FontWeight="Regular"
                       Style="{StaticResource Label_Button}" />
                <Border Style="{StaticResource NestedBorder}"
                        DockPanel.Dock="Top">
                    <UniformGrid DockPanel.Dock="Top"
                                 Rows="1">

                        <Label Content="Locale"
                               DockPanel.Dock="Left"
                               FontSize="16"
                               FontWeight="Regular" />
                        <ComboBox Style="{DynamicResource LocaleComboBoxStyle}" SelectionChanged="localeComboboxSelectionChanged"
                                  DockPanel.Dock="Right"
                                  x:Name="localeCombobox"
                                  FontSize="14"
                                  FontFamily="{DynamicResource Roboto}"
                                  Background="#FF1B1B1B"
                                  BorderBrush="#FF0F0F0F"
                                  Margin="0,4"
                                  HorizontalContentAlignment="Center">
                            <ComboBoxItem Tag="en"
                                          Content="English"
                                          FontSize="14"
                                          Background="#FF1B1B1B" 
                                          HorizontalContentAlignment="Center"/>
                            <ComboBoxItem Tag="ko"
                                          Content="한국어"
                                          FontSize="14"
                                          Background="#FF1B1B1B" 
                                          HorizontalContentAlignment="Center"/>
                        </ComboBox>
                    </UniformGrid>
                </Border>
                <Border DockPanel.Dock="Top"
                        Style="{StaticResource NestedBorder}">
                    <CheckBox x:Name="clipboardCheckbox"
                              Content="Clipboard"
                              ToolTip="Copy the results from the OCR over to the clipboard for easy pasting into chat"
                              Click="clipboardCheckboxClicked" />
                </Border>
                <Border DockPanel.Dock="Top"
                        Style="{StaticResource NestedBorder}">
                    <UniformGrid Rows="1">

                        <CheckBox x:Name="autoCheckbox"
                                  DockPanel.Dock="Right"
                                  Content="Auto"
                                  ToolTip="Automatically detects when the relic screen is visible."
                                  Click="AutoClicked" />
                        <CheckBox x:Name="Autolist"
                                  DockPanel.Dock="Left"
                                  Content="Auto list"
                                  ToolTip="Spawns a listing dialogue whenever the end of mission is detected, requires auto"
                                  Click="Autolist_Click" />
                    </UniformGrid>
                </Border>
            </DockPanel>
        </Border>

    </DockPanel>
</Window>